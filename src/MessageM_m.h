//
// Generated file, do not edit! Created by nedtool 5.7 from MessageM.msg.
//

#ifndef __MESSAGEM_M_H
#define __MESSAGEM_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <bitset>
typedef std::bitset<8> bits; 
// }}

/**
 * Class generated from <tt>MessageM.msg:25</tt> by nedtool.
 * <pre>
 * packet MessageM
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int type;
 *     int id;
 *     double sendingTime;
 *     string payload;
 *     bits trailer;
 *     bool mode;
 *     bool loss;
 *     bool duple;
 *     bool delay;
 * 
 * 
 * 
 * }
 * </pre>
 *
 * MessageM_Base is only useful if it gets subclassed, and MessageM is derived from it.
 * The minimum code to be written for MessageM is the following:
 *
 * <pre>
 * class MessageM : public MessageM_Base
 * {
 *   private:
 *     void copy(const MessageM& other) { ... }

 *   public:
 *     MessageM(const char *name=nullptr, short kind=0) : MessageM_Base(name,kind) {}
 *     MessageM(const MessageM& other) : MessageM_Base(other) {copy(other);}
 *     MessageM& operator=(const MessageM& other) {if (this==&other) return *this; MessageM_Base::operator=(other); copy(other); return *this;}
 *     virtual MessageM *dup() const override {return new MessageM(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from MessageM_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(MessageM)
 * </pre>
 */
class MessageM_Base : public ::omnetpp::cPacket
{
  protected:
    int type;
    int id;
    double sendingTime;
    ::omnetpp::opp_string payload;
    bits trailer;
    bool mode;
    bool loss;
    bool duple;
    bool delay;

  private:
    void copy(const MessageM_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MessageM_Base&);
    // make constructors protected to avoid instantiation
    MessageM_Base(const MessageM_Base& other);
    // make assignment operator protected to force the user override it
    MessageM_Base& operator=(const MessageM_Base& other);

  public:
    MessageM_Base(const char *name=nullptr, short kind=0);
    virtual ~MessageM_Base();
    virtual MessageM_Base *dup() const override {
        return new MessageM_Base(*this);
    }
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
    virtual int getId() const;
    virtual void setId(int id);
    virtual double getSendingTime() const;
    virtual void setSendingTime(double sendingTime);
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
    virtual bits& getTrailer();
    virtual const bits& getTrailer() const {return const_cast<MessageM_Base*>(this)->getTrailer();}
    virtual void setTrailer(const bits& trailer);
    virtual bool getMode() const;
    virtual void setMode(bool mode);
    virtual bool getLoss() const;
    virtual void setLoss(bool loss);
    virtual bool getDuple() const;
    virtual void setDuple(bool duple);
    virtual bool getDelay() const;
    virtual void setDelay(bool delay);
};


#endif // ifndef __MESSAGEM_M_H

